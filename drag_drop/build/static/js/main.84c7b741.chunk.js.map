{"version":3,"sources":["logo.svg","helperFunctions.js","ItemTypes.js","components/SidebarComponent/SidebarComponent.js","stateHolder.js","components/SideBar/SideBar.js","atoms/cardAtoms.js","atoms/canvasAtoms.js","components/Card/CardGenerator.js","components/Card/Card.js","components/Card/helpers.js","components/Canvas/CanvasGenerator.js","components/Canvas/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","randomStringGenerator","length","Array","map","i","Math","random","toString","join","SidebarComponent","props","id","useDrag","item","type","ItemTypes","collect","monitor","isDragging","drag","shouldBeDraggable","ref","className","content","onClick","StateHolder","key","state","states","updater","activeCard","currentlyDragging","this","getUpdater","oldState","getState","addState","deleteState","deleteUpdater","componentStates","Object","keys","data","index","includes","SideBar","componentState","JSON","stringify","stateHolder","returnComponentJson","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","DefaultState","dimensions","placeholder","connectedFrom","connectedTo","position","disabled","isConnectedToDragging","cardWithID","defaultState","atom","default","canvasComponents","listening","components","CardGenerator","dragRef","onDoubleClick","doubleClickHandler","onBlur","blurHandler","singleClickHandler","mainId","style","mainStyle","src","event","updatedState","deleteStateAndUpdater","stopPropagation","toState","toUpdater","archerId","relations","archerRelations","onChange","textOnChange","textAreaDisabled","value","textAreaValue","Card","card","componentsHolder","shouldBeUpdated","to","from","updatedCard","assign","cleanCard","useRecoilState","cardState","updateCardState","addUpdater","begin","end","self","getElementById","boundingBox","getBoundingClientRect","width","height","canvas","left","max","x","top","y","targetId","sourceId","sourceAnchor","targetAnchor","sourceCard","targetCard","x0","y0","deltaX","deltaY","anchors","abs","getSourceTargetAnchors","source","strokeColor","strokeWidth","noCurves","target","setActiveCard","getActiveCard","activeCardTo","CanvasGenerator","componentRef","componentOnClick","Canvas","canvasComponentHolder","updateCanvasComponent","useDrop","accept","drop","getClientOffset","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84c7b741.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const randomStringGenerator = (length = 32) => {\n  return [...Array(length)]\n    .map((i) => (~~(Math.random() * 36)).toString(36))\n    .join(\"\");\n};\n","export default {\n  CARD: \"card\",\n  CARDCREATOR: \"cardCreator\",\n};\n","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport ItemTypes from \"../../ItemTypes\";\nimport \"./SidebarComponent.css\";\nconst SidebarComponent = (props) => {\n  const id = props.id ? props.id : \"cardCreator\";\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARDCREATOR, id: id },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  if (props.shouldBeDraggable) {\n    return (\n      <div\n        ref={drag}\n        className={isDragging ? \"cardCreator dragging\" : \"cardCreator\"}\n      >\n        {props.content ? props.content : \"Drag and Drop on Canvas\"}\n      </div>\n    );\n  } else {\n    return (\n      <div className={\"cardCreator\"} onClick={props.onClick}>\n        {props.content ? props.content : \"Drag and Drop on Canvas\"}\n      </div>\n    );\n  }\n};\n\nexport default SidebarComponent;\n","export class StateHolder {\n  static states = {};\n  static updater = {};\n  static activeCard = \"\";\n  static currentlyDragging = {};\n\n  addState(key, state) {\n    StateHolder.states[key] = state;\n  }\n\n  getState(key) {\n    return StateHolder.states[key];\n  }\n\n  addUpdater(key, updater) {\n    StateHolder.updater[key] = updater;\n  }\n\n  getUpdater(key) {\n    return StateHolder.updater[key];\n  }\n\n  setActiveCard(id) {\n    StateHolder.activeCard = id;\n  }\n\n  getActiveCard() {\n    return StateHolder.activeCard;\n  }\n\n  getAllState() {\n    return StateHolder.states;\n  }\n\n  addCurrentlyDragging(id) {\n    StateHolder.currentlyDragging[id] = true;\n  }\n\n  isCurrentlyDragging(id) {\n    return StateHolder.currentlyDragging[id];\n  }\n\n  updateState(id, state) {\n    let updater = this.getUpdater(id);\n    let oldState = this.getState(id);\n    if (updater) {\n      updater({\n        ...oldState,\n        ...oldState,\n      });\n    } else {\n      this.addState(id, state);\n    }\n  }\n\n  removeCurrentlyDragging(id) {\n    if (StateHolder.currentlyDragging[id]) {\n      delete StateHolder.currentlyDragging[id];\n    }\n  }\n\n  deleteState(id) {\n    if (StateHolder.states[id]) {\n      delete StateHolder.states[id];\n    }\n  }\n\n  deleteUpdater(id) {\n    if (StateHolder.updater[id]) {\n      delete StateHolder.updater[id];\n    }\n  }\n\n  deleteStateAndUpdater(id) {\n    this.deleteState(id);\n    this.deleteUpdater(id);\n  }\n\n  returnComponentJson() {\n    let componentStates = {},\n      states = StateHolder.states;\n    Object.keys(states).map((data, index) => {\n      if (states[data].id && states[data].id.includes(\"card_component_\")) {\n        componentStates[data] = states[data];\n      }\n    });\n    return componentStates;\n  }\n}\n\nexport default new StateHolder();\n","import React from \"react\";\nimport \"./SideBar.css\";\nimport { randomStringGenerator } from \"../../helperFunctions\";\nimport SidebarComponent from \"../SidebarComponent/SidebarComponent\";\nimport stateHolder from \"../../stateHolder\";\n\nconst SideBar = (props) => {\n  return (\n    <div className=\"sideBar\">\n      <SidebarComponent\n        id={\"sideBarComponent\" + randomStringGenerator()}\n        shouldBeDraggable={true}\n      />\n      <SidebarComponent\n        id={\"sideBarComponent\" + randomStringGenerator()}\n        shouldBeDraggable={false}\n        content=\"Download JSON\"\n        onClick={() => {\n          let componentState = JSON.stringify(\n            stateHolder.returnComponentJson()\n          );\n          const element = document.createElement(\"a\");\n          const file = new Blob([componentState], { type: \"text/plain\" });\n          element.href = URL.createObjectURL(file);\n          element.download = \"componentStates.json\";\n          document.body.appendChild(element);\n          element.click();\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SideBar;\n","import { atom } from \"recoil\";\n\nconst DefaultState = {\n  dimensions: [],\n  placeholder: \"Enter your content.\",\n  content: \"\",\n  connectedFrom: null,\n  connectedTo: null,\n  position: [],\n  disabled: true,\n  isConnectedToDragging: false,\n};\n\nexport const cardWithID = (id, defaultState) =>\n  atom({\n    key: `${id}`,\n    default: {\n      ...DefaultState,\n      ...defaultState,\n      id: id,\n    },\n  });\n\nexport const stateListener = atom({\n  key: \"cardStateListener\",\n  default: {\n    listening: \"\",\n  },\n});\n","import { atom } from \"recoil\";\n\nexport const canvasComponents = atom({\n  key: `canvasComponentHolder`,\n  default: {\n    components: {},\n  },\n});\n","import React from \"react\";\nimport \"./Card.css\";\nimport { ArcherElement } from \"react-archer\";\nimport stateHolder, { StateHolder } from \"../../stateHolder\";\nimport \"./Card.css\";\n\nconst CardGenerator = (props) => {\n  return (\n    <div\n      ref={props.dragRef}\n      onDoubleClick={props.doubleClickHandler}\n      onBlur={props.blurHandler}\n      onClick={props.singleClickHandler}\n      id={props.mainId}\n      style={props.mainStyle}\n      className={\n        props.isDragging\n          ? \"card cardDragging form-control cardSelected\"\n          : \"card form-control cardSelected\"\n      }\n    >\n      <div className=\"functionHolder\">\n        <img\n          src=\"/delete.png\"\n          onClick={(event) => {\n            let state = stateHolder.getState(\"canvasComponentsHolder\");\n            let updater = stateHolder.getUpdater(\"canvasComponentsHolder\");\n            let updatedState = {};\n            let keys = Object.keys(state.components);\n            for (let i = 0; i < keys.length; i++) {\n              let element = state.components[keys[i]];\n              if (element.id !== props.mainId) {\n                updatedState[keys[i]] = element;\n              }\n            }\n            updater({\n              components: updatedState,\n            });\n            stateHolder.deleteStateAndUpdater(props.mainId);\n            event.stopPropagation();\n          }}\n        />\n        <img\n          src=\"/cancel.png\"\n          onClick={(event) => {\n            let state = stateHolder.getState(props.mainId);\n            let updater = stateHolder.getUpdater(props.mainId);\n\n            if (state.connectedTo) {\n              let toState = stateHolder.getState(state.connectedTo);\n              let toUpdater = stateHolder.getUpdater(state.connectedTo);\n              toUpdater({\n                ...toState,\n                connectedFrom: \"\",\n              });\n              updater({\n                ...state,\n                connectedTo: \"\",\n              });\n              stateHolder.addState(state.id, {\n                ...state,\n                connectedTo: \"\",\n              });\n            }\n            event.stopPropagation();\n          }}\n        />\n      </div>\n      <ArcherElement id={props.archerId} relations={props.archerRelations}>\n        <textarea\n          className=\"cardBody\"\n          type=\"text\"\n          onChange={props.textOnChange}\n          disabled={props.textAreaDisabled}\n          value={props.textAreaValue}\n        />\n      </ArcherElement>\n    </div>\n  );\n};\n\nexport default CardGenerator;\n","import React, { useRef, useLayoutEffect, useEffect, useState } from \"react\";\n// import { stateListener } from \"../../atoms\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useDrag } from \"react-dnd\";\nimport ItemTypes from \"../../ItemTypes\";\nimport \"./Card.css\";\nimport stateHolder from \"../../stateHolder\";\nimport CardGenerator from \"./CardGenerator\";\nimport { cleanCard, getSourceTargetAnchors } from \"./helpers\";\n\nconst Card = (props) => {\n  const id = props.id ? props.id : \"card_component\";\n  if (stateHolder.getState(id)) {\n    cleanCard(id);\n  }\n\n  const [cardState, updateCardState] = useRecoilState(props.atom);\n\n  stateHolder.addState(id, cardState);\n  stateHolder.addUpdater(id, updateCardState);\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id: id },\n    begin: (monitor) => {\n      if (cardState.connectedFrom) {\n        let state = stateHolder.getState(cardState.connectedFrom);\n        let updater = stateHolder.getUpdater(cardState.connectedFrom);\n        updater({\n          ...state,\n          isConnectedToDragging: true,\n        });\n      }\n    },\n    end: (item, monitor) => {\n      if (cardState.connectedFrom) {\n        let state = stateHolder.getState(cardState.connectedFrom);\n        let updater = stateHolder.getUpdater(cardState.connectedFrom);\n        updater({\n          ...state,\n          isConnectedToDragging: false,\n        });\n      }\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  let self = document.getElementById(id);\n  let boundingBox = self\n    ? self.getBoundingClientRect()\n    : {\n        width: 0,\n        height: 0,\n      };\n\n  let canvas = document.getElementById(\"canvas\");\n\n  let left = Math.max(\n    cardState.position.x -\n      canvas.getBoundingClientRect().x -\n      boundingBox.width / 2,\n    0\n  );\n\n  let top = Math.max(cardState.position.y - boundingBox.height / 2, 0);\n\n  const onFocus = () => {\n    stateHolder.setActiveCard(\"\");\n    updateCardState({\n      ...cardState,\n      disabled: false,\n    });\n    stateHolder.setActiveCard();\n  };\n\n  const onBlur = () => {\n    stateHolder.setActiveCard(\"\");\n    updateCardState({\n      ...cardState,\n      disabled: true,\n    });\n  };\n\n  let archerRelations,\n    archerId = id + \"archer\";\n\n  if (\n    cardState.connectedTo &&\n    !isDragging &&\n    !cardState.isConnectedToDragging\n  ) {\n    let targetId = cardState.connectedTo + \"archer\";\n    const [source, target] = getSourceTargetAnchors(id, cardState.connectedTo);\n    archerRelations = {\n      targetId: targetId,\n      targetAnchor: target,\n      sourceAnchor: source,\n      style: { strokeColor: \"blue\", strokeWidth: 1, noCurves: false },\n    };\n  } else {\n    archerRelations = {};\n  }\n\n  const singleClickHandler = (event) => {\n    let activeCard = stateHolder.getActiveCard();\n    let updatedCard = {};\n    Object.assign(updatedCard, cardState);\n    if (activeCard) {\n      if (activeCard === id) {\n        stateHolder.setActiveCard(\"\");\n        return;\n      }\n      let state = stateHolder.getState(activeCard);\n      let updater = stateHolder.getUpdater(activeCard);\n      let activeCardTo = state.connectedTo;\n      updater({\n        ...state,\n        connectedTo: id,\n      });\n      if (activeCardTo && activeCardTo === cardState.connectedFrom) {\n        state = stateHolder.getState(activeCardTo);\n        updater = stateHolder.getUpdater(activeCardTo);\n        updater({\n          ...state,\n          connectedFrom: \"\",\n          connectedTo: \"\",\n        });\n      } else {\n        if (activeCardTo) {\n          state = stateHolder.getState(activeCardTo);\n          updater = stateHolder.getUpdater(activeCardTo);\n          updater({\n            ...state,\n            connectedFrom: \"\",\n          });\n        }\n        if (cardState.connectedFrom) {\n          state = stateHolder.getState(cardState.connectedFrom);\n          updater = stateHolder.getUpdater(cardState.connectedFrom);\n          updater({\n            ...state,\n            connectedTo: \"\",\n          });\n        }\n      }\n      updatedCard.connectedFrom = activeCard;\n      stateHolder.setActiveCard(\"\");\n    } else {\n      stateHolder.setActiveCard(id);\n    }\n    event.stopPropagation();\n    updateCardState({\n      ...updatedCard,\n      dimensions: [boundingBox.width, boundingBox.height],\n    });\n  };\n\n  return (\n    <CardGenerator\n      mainId={id}\n      textOnChange={(event) => {\n        updateCardState({\n          ...cardState,\n          content: event.target.value,\n        });\n      }}\n      textAreaDisabled={cardState.disabled ? \"disabled\" : \"\"}\n      archerRelations={[archerRelations]}\n      isDragging={isDragging}\n      dragRef={drag}\n      doubleClickHandler={onFocus}\n      blurHandler={onBlur}\n      singleClickHandler={singleClickHandler}\n      mainStyle={{\n        left: left,\n        top: top,\n        position: \"absolute\",\n      }}\n      archerId={archerId}\n      textAreaValue={cardState.content}\n    />\n  );\n};\n\nexport default Card;\n","import stateHolder from \"../../stateHolder\";\n\nexport const cleanCard = (id) => {\n  let card = stateHolder.getState(id),\n    componentsHolder = stateHolder.getState(\"canvasComponentsHolder\"),\n    shouldBeUpdated = false;\n  let to = card.connectedTo,\n    from = card.connectedFrom,\n    updatedCard = {};\n  Object.assign(updatedCard, card);\n\n  if (to && !componentsHolder.components[to]) {\n    shouldBeUpdated = true;\n    updatedCard.connectedTo = \"\";\n    stateHolder.deleteStateAndUpdater(to);\n  }\n  if (from && !componentsHolder.components[from]) {\n    shouldBeUpdated = true;\n    updatedCard.connectedFrom = \"\";\n    stateHolder.deleteStateAndUpdater(from);\n  }\n\n  if (shouldBeUpdated) {\n    stateHolder.getUpdater(id)(updatedCard);\n  }\n};\n\nexport const getSourceTargetAnchors = (sourceId, targetId) => {\n  let sourceCard = stateHolder.getState(sourceId),\n    sourceAnchor;\n  let targetCard = stateHolder.getState(targetId),\n    targetAnchor;\n\n  let x0 = sourceCard.position.x;\n  let y0 = sourceCard.position.y;\n  let x1 = targetCard.position.x;\n  let y1 = targetCard.position.y;\n\n  let deltaX = x0 - x1;\n  let deltaY = y0 - y1;\n\n  const anchors = {\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    TOP: \"top\",\n    BOTTOM: \"bottom\",\n  };\n\n  if (deltaX < 0) {\n    // source left\n    if (deltaY < 0) {\n      // source above\n      if (Math.abs(deltaX) < Math.abs(deltaY)) {\n        // deltaY is greater\n        sourceAnchor = anchors.BOTTOM;\n        targetAnchor = anchors.TOP;\n      } else {\n        // deltaX is greater\n        sourceAnchor = anchors.RIGHT;\n        targetAnchor = anchors.LEFT;\n      }\n    } else {\n      // source below\n      if (Math.abs(deltaX) < Math.abs(deltaY)) {\n        // deltaY is greater\n        sourceAnchor = anchors.TOP;\n        targetAnchor = anchors.BOTTOM;\n      } else {\n        // deltaX is greater\n        sourceAnchor = anchors.RIGHT;\n        targetAnchor = anchors.LEFT;\n      }\n    }\n  } else {\n    if (deltaY < 0) {\n      if (Math.abs(deltaX) < Math.abs(deltaY)) {\n        sourceAnchor = anchors.BOTTOM;\n        targetAnchor = anchors.TOP;\n      } else {\n        sourceAnchor = anchors.LEFT;\n        targetAnchor = anchors.RIGHT;\n      }\n    } else {\n      if (Math.abs(deltaX) < Math.abs(deltaY)) {\n        sourceAnchor = anchors.TOP;\n        targetAnchor = anchors.BOTTOM;\n      } else {\n        sourceAnchor = anchors.LEFT;\n        targetAnchor = anchors.RIGHT;\n      }\n    }\n  }\n  return [sourceAnchor, targetAnchor];\n  //   return [\"middle\", \"middle\"];\n};\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport \"./Canvas.css\";\n\nconst CanvasGenerator = (props) => {\n  \n  return (\n    <div\n      id=\"canvas\"\n      className=\"canvas\"\n      ref={props.componentRef}\n      onClick={props.componentOnClick}\n    >\n      <ArcherContainer>\n        {Object.keys(props.components).map((key) => {\n          let data = props.components[key];\n          return <Card {...data} key={data.id + \"key\"} />;\n        })}\n      </ArcherContainer>\n    </div>\n  );\n};\n\nexport default CanvasGenerator;\n","import React from \"react\";\nimport \"./Canvas.css\";\nimport { useDrop } from \"react-dnd\";\nimport { randomStringGenerator } from \"../../helperFunctions\";\nimport ItemTypes from \"../../ItemTypes\";\nimport { useRecoilState } from \"recoil\";\nimport { cardWithID } from \"../../atoms\";\nimport { canvasComponents } from \"../../atoms/canvasAtoms\";\nimport stateHolder from \"../../stateHolder\";\nimport CanvasGenerator from \"./CanvasGenerator\";\n\nconst Canvas = (props) => {\n  const [canvasComponentHolder, updateCanvasComponent] = useRecoilState(\n    canvasComponents\n  );\n\n  stateHolder.addState(\"canvasComponentsHolder\", canvasComponentHolder);\n  stateHolder.addUpdater(\"canvasComponentsHolder\", updateCanvasComponent);\n\n  const [{}, drop] = useDrop({\n    accept: [ItemTypes.CARD, ItemTypes.CARDCREATOR],\n    drop: (item, monitor) => {\n      if (item.type === ItemTypes.CARDCREATOR) {\n        let id = \"card_component_\" + randomStringGenerator();\n        updateCanvasComponent({\n          components: {\n            ...canvasComponentHolder.components,\n            [id]: {\n              id: id,\n              atom: cardWithID(id, {\n                content: \"Double Click to Edit Content\",\n                position: monitor.getClientOffset(),\n              }),\n            },\n          },\n        });\n      } else {\n        let state = stateHolder.getState(item.id);\n        let updater = stateHolder.getUpdater(item.id);\n        updater({\n          ...state,\n          position: monitor.getClientOffset(),\n        });\n      }\n    },\n    // hover: (item, monitor) => {\n    //   let state = stateHolder.getState(item.id);\n    //   if (state) {\n    //     console.log(\"This is the card to be updated : \", state);\n    //     let updater = stateHolder.getUpdater(item.id);\n    //     console.log(\"This is the updater : \", updater);\n    //     updater({\n    //       ...state,\n    //       position: monitor.getClientOffset(),\n    //     });\n    //   }\n    // },\n    collect: (monitor) => ({}),\n  });\n\n  return (\n    <CanvasGenerator\n      componentRef={drop}\n      componentOnClick={() => {\n        stateHolder.setActiveCard(\"\");\n      }}\n      components={canvasComponentHolder.components}\n    />\n  );\n};\n\nexport default Canvas;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { randomStringGenerator as stringGenerator } from \"./helperFunctions\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Canvas from \"./components/Canvas/Canvas\";\nimport { RecoilRoot } from \"recoil\";\nimport { ArcherContainer } from \"react-archer\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <DndProvider backend={HTML5Backend}>\n        <SideBar />\n        <Canvas />\n      </DndProvider>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}